(dp1
S'output'
p2
S"<class 'pattern.web.URLTimeout'> "
p3
sS'layer'
p4
S'/home/samuel/Desktop/web2py/applications/welcome/controllers/stream.py'
p5
sS'code'
p6
S'import sys; \nsys.path.append(\'/usr/local/lib/python2.7/dist-packages\')\nsys.path.append(\'/usr/lib/python2.7/dist-packages\')\nfrom pattern.web import Twitter\nfrom pattern.web import Facebook, NEWS, COMMENTS, LIKES\n \n\ndef index():\n\n    response.flash = T("Feedsdf s!")\n    response.flash2 = T(\'Twitter Feed Area\')\n\n    text = request.vars.search_text\n    \n    get_data = search(text)\n\n    count = 0\n\n    list_text = []\n   \n    words = text.split()\n\n    for word in words:\n            list_text.append(word)\n  \n    length = len(get_data)\n\n    response.view = \'default/detail-one.html\'\n    return dict(message=get_data, google=get_data_google, lengthofdata=length, words=list_text, count=count)\n\n\ndef search(text):\n\tlist = []\n        counter = 0\n\n\ttwitter = Twitter(language=\'en\') \n\tfor tweet in twitter.search(text, count=30, cached=False):\n            list.append(tweet.text)\n            if(text in tweet.text):\n                counter = counter + 1\n                \n\treturn list\n\ndef count():\n    counter = counter + 1\n\n\n# def parse(text):\n  \n#     s = parsetree(text) \n#     for sentence in s: \n#             for chunk in sentence.chunks:\n#                 for word in chunk.words:\n#                     s.append(word)\n  \n\n#     return s\n\n# def plotgraph():\n  \n\n#     x = [1,2,3]\n#     y = [5,6,7]\n\n#     fig = plt.figure()\n#     plt.plot(x, y)\n\n#     return plt.show()\n   \n# def graphplot():\n#     g = Graph()\n#             for i in range(10):\n#                     for result in Bing().search(\'"more important than"\', start=i+1, count=50):\n#                         s = r.text.lower() \n#                         s = plaintext(s)\n#                         s = parsetree(s)\n#                         p = \'{NP} (VP) more important than {NP}\'\n#                     for m in search(p, s):\n#                         x = m.group(1).string # NP left\n#                         y = m.group(2).string # NP right\n#                         if x not in g:\n#                             g.add_node(x)\n#                         if y not in g:\n#                             g.add_node(y)\n#                         g.add_edge(g[x], g[y], stroke=(0,0,0,0.75)) # R,G,B,A\n     \n#             g = g.split()[0] # Largest subgraph.\n          \n#             for n in g.sorted()[:40]: # Sort by Node.weight.\n#                     n.fill = (0, 0.5, 1, 0.75 * n.weight)\n          \n#     g.export(\'test\', directed=True, weighted=0.6)\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/samuel/Desktop/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/samuel/Desktop/web2py/applications/welcome/controllers/stream.py", line 93, in <module>\n  File "/home/samuel/Desktop/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/samuel/Desktop/web2py/applications/welcome/controllers/stream.py", line 15, in index\n    get_data = search(text)\n  File "/home/samuel/Desktop/web2py/applications/welcome/controllers/stream.py", line 37, in search\n    for tweet in twitter.search(text, count=30, cached=False):\n  File "/usr/local/lib/python2.7/dist-packages/Pattern-2.6-py2.7.egg/pattern/web/__init__.py", line 1503, in search\n    data = url.download(cached=cached, **kwargs)\n  File "/usr/local/lib/python2.7/dist-packages/Pattern-2.6-py2.7.egg/pattern/web/__init__.py", line 437, in download\n    data = self.open(timeout, proxy, user_agent, referrer, authentication).read()\n  File "/usr/local/lib/python2.7/dist-packages/Pattern-2.6-py2.7.egg/pattern/web/__init__.py", line 409, in open\n    raise URLTimeout(src=e, url=url)\nURLTimeout\n'
p11
s.